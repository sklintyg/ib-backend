apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

war.rootSpec.exclude "logback.xml"

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8990/"
    include '**/*IT*'
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = '6.11.3'
    yarnVersion = '1.5.1'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
}

if (project.hasProperty('rehabstod.useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else {
    war.dependsOn grunt_build_no_minify
}

war.dependsOn createVersionPropertyFile

task bowerInstall(type: NodeTask, dependsOn:yarn) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('src/main/webapp/bower_components')
}

grunt_build.dependsOn bowerInstall
grunt_build_no_minify.dependsOn bowerInstall

gretty {
    contextPath = '/'
    contextConfigFile = "${projectDir}/src/main/resources/jetty-web.xml"
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"

    integrationTestTask = null
    scanInterval = 0
    httpPort = 8990
    debugPort = 5010
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    enableNaming = true

    jvmArgs = [
               '-Dspring.profiles.active=dev,ib-stub,caching-enabled',
               '-Dconfig.file=' + projectDir + '/src/main/resources/dev.properties',
               '-Dcredentials.file=' + projectDir + '/src/main/resources/dev-credentials.properties',
               '-Dresources.folder=/' +projectDir + '/../src/main/resources',
               '-XX:MaxPermSize=256M'
               ]

    /***************** Konfiguration för att köra med SITHS och HSA aktiverat lokalt. *******************/
    //    jvmArgs = [
    //            '-Dspring.profiles.active=dev,ib-security-test,ib-srs-stub',
    //            '-Dconfig.folder=' + projectDir + '/../../ib-konfiguration/demo',
    //            '-Dcofile:${ib.config.file}nfig.file=' + projectDir + '/../../ib-konfiguration/demo/ib.properties',
    //            '-Dfeatures.file=' + projectDir + '/../../ib-konfiguration/demo/features.properties',
    //            '-Dcredentials.file=' + projectDir + '/../../ib-konfiguration/demo/credentials.properties',
    //            '-Dresources.folder=/' +projectDir + '/../src/main/resources'
    //    ]
}

dependencies {
    compile project(":ib-common")
    compile project(":ib-persistence")
    compile project (":ib-myndighets-integration")

    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${internalMonitoringSchemaVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${monitoringSchemaVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    compile "se.riv.intygsbestallning.certificate.order:intygsbestallning-certificate-order-schemas:${intygsbestallningCertificateOrderSchemasVersion}"

    compile "se.inera.intyg.infra:common-cache-metrics:${intygInfraVersion}"
    compile "se.inera.intyg.infra:dynamiclink:${intygInfraVersion}"
    compile "se.inera.intyg.infra:hsa-integration:${intygInfraVersion}"
    compile "se.inera.intyg.infra:pu-integration:${intygInfraVersion}"
    compile "se.inera.intyg.infra:security-siths:${intygInfraVersion}"
    compile "se.inera.intyg.infra:sjukfall-engine:${intygInfraVersion}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonYamlVersion}"
    compile "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    compile "com.itextpdf:itextpdf:${itextVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecurityExtensionsVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.ws:spring-ws-core:${springWsCoreVersion}"
    compile "org.springframework:spring-jms:${springContextVersion}"
    compile "org.springframework:spring-aop:${springContextVersion}"
    compile "wsdl4j:wsdl4j:${wsdl4jVersion}"

    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    compile "io.prometheus:simpleclient:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_common:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_hotspot:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_servlet:${prometheusClientVersion}"

    compile "org.aspectj:aspectjweaver:${aspectjWeaverVersion}"

    compileOnly "javax.jms:jms-api:${javaxJmsVersion}"
    compileOnly "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    compileOnly "jstl:jstl:${jstlVersion}"

    testCompile "com.jayway.restassured:rest-assured:${restAssuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${restAssuredVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powermockFullVersion}"
    testCompile "org.powermock:powermock-api-mockito2:${powermockFullVersion}"
    testCompile "org.springframework:spring-test:${springContextVersion}"
    testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"
    testCompile "javax.jms:jms-api:${javaxJmsVersion}"
    testCompile "org.antlr:ST4:${stAntlr4Version}"

    gretty "org.apache.activemq:activemq-client:${activemqVersion}"
    gretty "org.apache.activemq:activemq-broker:${activemqVersion}"
}
